variable "project_prefix" {
  type        = string
  description = "prefix string put in front of string"
  default     = "f5xc"
}

variable "project_suffix" {
  type        = string
  description = "prefix string put at the end of string"
  default     = "01"
}

variable "aws_eks_cluster_name" {
  type    = string
  default = "aws-eks-cluster"
}

variable "aws_region" {
  type    = string
  default = "us-west-2"
}

variable "aws_az_a" {
  type    = string
  default = "a"
}

variable "aws_az_b" {
  type    = string
  default = "b"
}

variable "aws_access_key_id" {
  type = string
}

variable "aws_secret_access_key" {
  type = string
}

variable "f5xc_tenant" {
  type    = string
}

variable "aws_vpc_cidr_block" {
  type    = string
  default = "172.16.72.0/21"
}

variable "aws_k8s_subnet_a_cidr_block" {
  type    = string
  default = "172.16.72.0/24"
}

variable "aws_k8s_subnet_b_cidr_block" {
  type    = string
  default = "172.16.73.0/24"
}

variable "owner" {
  type    = string
  default = "c.klewar@f5.com"
}

locals {
  site_name   = format("%s-regression-env-%s", var.project_prefix, var.project_suffix)
  custom_tags = {
    f5xc-tenant  = var.f5xc_tenant
    f5xc-feature = "aws-eks"
  }
}

provider "aws" {
  region = var.aws_region
  alias  = "default"
}

module "eks_inline" {
  source               = "./modules/aws/eks"
  owner                = var.owner
  aws_region           = var.aws_region
  aws_az_name          = format("%s%s", var.aws_region, var.aws_az_a)
  aws_vpc_subnet_a     = "172.16.184.0/24"
  aws_vpc_subnet_b     = "172.16.185.0/24"
  aws_vpc_cidr_block   = "172.16.184.0/21"
  aws_eks_cluster_name = format("%s-%s-%s-inline", var.project_prefix, var.aws_eks_cluster_name, var.project_suffix)
  providers            = {
    aws = aws.default
  }
}

module "vpc" {
  source             = "./modules/aws/vpc"
  aws_region         = var.aws_region
  aws_az_name        = format("%s%s", var.aws_region, var.aws_az_a)
  aws_vpc_name       = local.site_name
  aws_owner          = var.owner
  aws_vpc_cidr_block = var.aws_vpc_cidr_block
  custom_tags        = merge({ "ves-io-site-name" : local.site_name, "ves-io-creator-id" : var.owner }, local.custom_tags)
  providers          = {
    aws = aws.default
  }
}

module "subnet" {
  source          = "./modules/aws/subnet"
  aws_vpc_id      = module.vpc.aws_vpc["id"]
  aws_vpc_subnets = [
    {
      name                    = format("%s-sn-workload", local.site_name)
      owner                   = var.owner
      cidr_block              = var.aws_k8s_subnet_a_cidr_block,
      availability_zone       = format("%s%s", var.aws_region, var.aws_az_a),
      map_public_ip_on_launch = "false",
      custom_tags             = local.custom_tags
    },
    {
      name                    = format("%s-sn-k8s", local.site_name)
      owner                   = var.owner
      cidr_block              = var.aws_k8s_subnet_b_cidr_block,
      availability_zone       = format("%s%s", var.aws_region, var.aws_az_b),
      map_public_ip_on_launch = "true",
      custom_tags             = local.custom_tags
    }
  ]
  providers = {
    aws = aws.default
  }
}

module "eks_reference" {
  source                  = "./modules/aws/eks"
  owner                   = var.owner
  aws_region              = var.aws_region
  aws_az_name             = format("%s%s", var.aws_region, var.aws_az_a)
  aws_existing_subnet_ids = module.subnet.aws_subnets_id
  aws_eks_cluster_name    = format("%s-%s-%s-ref", var.project_prefix, var.aws_eks_cluster_name, var.project_suffix)
  providers               = {
    aws = aws.default
  }
}

output "eks_inline" {
  value     = module.eks_inline.aws_eks
  sensitive = true
}

output "eks_reference" {
  value     = module.eks_reference.aws_eks
  sensitive = true
}